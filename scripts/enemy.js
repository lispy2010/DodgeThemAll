class Enemy { constructor(x, y) { this.x = x + 32; this.y = y + 32; this.velX = 0; this.velY = 0; this.trails = []; } get hitbox() { return new Hitbox(this.x, this.y, 16, 16); } } class BasicEnemy extends Enemy { constructor(x, y) { super(x, y); this.velX = [-5, 5][Math.floor(Math.random() * 2)]; this.velY = [-5, 5][Math.floor(Math.random() * 2)]; } draw() { if (options.showTrail) { this.trails.forEach(t => { t.draw(); }); } ctx.fillStyle = "red"; ctx.fillRect(this.x, this.y, 16, 16); } update(_) { this.x += this.velX; this.y += this.velY; if (this.x < 0 || this.x > canvas.width - 30) { this.velX *= -1; for (let i = 0; i < 5; i++) { particles.push(new Particle(this.x, this.y, { x: Math.random() * 6 - 3, y: Math.random() * 6 - 3 }, Math.floor(Math.random() * 6) + 1, { r: 255, g: 0, b: 0 }, 120)); } } if (this.y < 0 || this.y > canvas.height - 48) { this.velY *= -1; for (let i = 0; i < 5; i++) { particles.push(new Particle(this.x, this.y, { x: Math.random() * 6 - 3, y: Math.random() * 6 - 3 }, Math.floor(Math.random() * 6) + 1, { r: 255, g: 0, b: 0 }, 120)); } } this.trails.forEach((t, i) => { if (t.a <= 0) { this.trails.splice(i, 1); } t.update(); }); this.trails.push(new Trail(this.x, this.y, 16, 16, 255, 0, 0)); if (!options.showTrail) { this.trails = []; } } } class FastEnemy extends Enemy { constructor(x, y) { super(x, y); this.velX = [-2, 2][Math.floor(Math.random() * 2)]; this.velY = [-9, 9][Math.floor(Math.random() * 2)]; } draw() { if (options.showTrail) { this.trails.forEach(t => { t.draw(); }); } ctx.fillStyle = "cyan"; ctx.fillRect(this.x, this.y, 16, 16); } update(_) { this.x += this.velX; this.y += this.velY; if (this.x < 0 || this.x > canvas.width - 30) { this.velX *= -1; for (let i = 0; i < 5; i++) { particles.push(new Particle(this.x, this.y, { x: Math.random() * 6 - 3, y: Math.random() * 6 - 3 }, Math.floor(Math.random() * 6) + 1, { r: 0, g: 255, b: 255 }, 120)); } } if (this.y < 0 || this.y > canvas.height - 48) { this.velY *= -1; for (let i = 0; i < 5; i++) { particles.push(new Particle(this.x, this.y, { x: Math.random() * 6 - 3, y: Math.random() * 6 - 3 }, Math.floor(Math.random() * 6) + 1, { r: 0, g: 255, b: 255 }, 120)); } } this.trails.forEach((t, i) => { if (t.a <= 0) { this.trails.splice(i, 1); } t.update(); }); this.trails.push(new Trail(this.x, this.y, 16, 16, 0, 255, 255)); if (!options.showTrail) { this.trails = []; } } } class RainbowEnemy extends Enemy { constructor(x, y) { super(x, y); this.colors = ["red", "orange", "yellow", "lime", "deepskyblue", "blue", "purple"]; this.velX = [-5, 5][Math.floor(Math.random() * 2)]; this.velY = 0; this.color = 0; this.invertedGravity = !Math.floor(Math.random() * 2); setInterval(() => { this.color++; if (this.color > this.colors.length - 1) { this.color = 0; } }, 150); } draw() { if (options.showTrail) { this.trails.forEach(t => { t.draw(); }); } ctx.fillStyle = this.colors[this.color]; ctx.fillRect(this.x, this.y, 16, 16); } update(_) { this.x += this.velX; this.y += this.velY; this.velY += this.invertedGravity ? -.5 : .5; if (this.x < 0 || this.x > canvas.width - 30 || this.y < 0 || this.y > canvas.height - 48) { for (let i = 0; i < 5; i++) { particles.push(new Particle(this.x, this.y, { x: Math.random() * 6 - 3, y: Math.random() * 6 - 3 }, Math.floor(Math.random() * 6) + 1, this.getColor(), 120)); } } if (this.x < 0 || this.x > canvas.width - 30) { this.velX *= -1; } if (this.y < 0 || this.y > canvas.height - 48) { this.velY = this.invertedGravity ? 19 : -19; } enemies.forEach(e => { if (e instanceof RainbowEnemy && e !== this && this.hitbox.intersects(e.hitbox)) { this.invertedGravity = !this.invertedGravity; } }); this.trails.forEach((t, i) => { if (t.a <= 0) { this.trails.splice(i, 1); } t.update(); }); if (this.color == 0) { this.trails.push(new Trail(this.x, this.y, 16, 16, 255, 0, 0)); } else if (this.color == 1) { this.trails.push(new Trail(this.x, this.y, 16, 16, 255, 215, 0)); } else if (this.color == 2) { this.trails.push(new Trail(this.x, this.y, 16, 16, 255, 255, 0)); } else if (this.color == 3) { this.trails.push(new Trail(this.x, this.y, 16, 16, 0, 255, 0)); } else if (this.color == 4) { this.trails.push(new Trail(this.x, this.y, 16, 16, 0, 191, 255)); } else if (this.color == 5) { this.trails.push(new Trail(this.x, this.y, 16, 16, 0, 0, 255)); } else if (this.color == 6) { this.trails.push(new Trail(this.x, this.y, 16, 16, 128, 0, 128)); } if (!options.showTrail) { this.trails = []; } } getColor() { let col = this.colors[this.color]; switch (col) { case "red": return { r: 255, g: 0, b: 0 }; case "orange": return { r: 255, g: 165, b: 0 }; case "yellow": return { r: 255, g: 255, b: 0 }; case "lime": return { r: 0, g: 255, b: 0 }; case "deepskyblue": return { r: 0, g: 191, b: 255 }; case "blue": return { r: 0, g: 0, b: 255 }; case "purple": return { r: 128, g: 0, b: 128 }; default: return { r: 0, g: 0, b: 0 }; } } } class SmartEnemy extends Enemy { constructor(x, y) { super(x, y); this.baseVelX = Math.random() * 3 + 1; this.baseVelY = Math.random() * 3 + 1; } draw() { if (options.showTrail) { this.trails.forEach(t => { t.draw(); }); } ctx.fillStyle = "pink"; ctx.fillRect(this.x, this.y, 16, 16); } update(player) { this.x += this.velX; this.y += this.velY; let diffX = this.x - player.x - 16; let diffY = this.y - player.y - 16; let dist = Math.sqrt(((this.x - player.x) * (this.x - player.x) + (this.y - player.y) * (this.y - player.y))); this.velX = (-1 / dist * diffX) * this.baseVelX; this.velY = (-1 / dist * diffY) * this.baseVelY; this.trails.forEach((t, i) => { if (t.a <= 0) { this.trails.splice(i, 1); } t.update(); }); this.trails.push(new Trail(this.x, this.y, 16, 16, 255, 192, 203)); if (!options.showTrail) { this.trails = []; } } } class SlowEnemy extends Enemy { constructor(x, y) { super(x, y); this.velX = [-2, 2][Math.floor(Math.random() * 2)]; this.velY = [-2, 2][Math.floor(Math.random() * 2)]; } draw() { if (options.showTrail) { this.trails.forEach(t => { t.draw(); }); } ctx.fillStyle = "saddlebrown"; ctx.fillRect(this.x, this.y, 16, 16); } update(_) { this.x += this.velX; this.y += this.velY; if (this.x < 0 || this.x > canvas.width - 30) { this.velX *= -1; for (let i = 0; i < 5; i++) { particles.push(new Particle(this.x, this.y, { x: Math.random() * 6 - 3, y: Math.random() * 6 - 3 }, Math.floor(Math.random() * 6) + 1, { r: 139, g: 69, b: 19 }, 120)); } } if (this.y < 0 || this.y > canvas.height - 48) { this.velY *= -1; for (let i = 0; i < 5; i++) { particles.push(new Particle(this.x, this.y, { x: Math.random() * 6 - 3, y: Math.random() * 6 - 3 }, Math.floor(Math.random() * 6) + 1, { r: 139, g: 69, b: 19 }, 120)); } } this.trails.forEach((t, i) => { if (t.a <= 0) { this.trails.splice(i, 1); } t.update(); }); this.trails.push(new Trail(this.x, this.y, 16, 16, 139, 69, 19)); if (!options.showTrail) { this.trails = []; } } } class CustomEnemy extends Enemy { constructor(x, y) { super(x, y); this.velX = [-5, 5][Math.floor(Math.random() * 2)]; this.velY = [-5, 5][Math.floor(Math.random() * 2)]; this.r = 255; this.g = 0; this.b = 0; } draw() { if (options.showTrail) { this.trails.forEach(t => { t.draw(); }); } ctx.fillStyle = `rgb(${this.r}, ${this.g}, ${this.b})`; ctx.fillRect(this.x, this.y, 16, 16); } update(_) { this.x += this.velX; this.y += this.velY; if (this.x < 34 || this.x > 280 - 20) { this.velX *= -1; for (let i = 0; i < 5; i++) { particles.push(new Particle(this.x, this.y, { x: Math.random() * 6 - 3, y: Math.random() * 6 - 3 }, Math.floor(Math.random() * 6) + 1, { r: this.r, g: this.g, b: this.b }, 120)); } } if (this.y < 54 || this.y > 550 - 20) { this.velY *= -1; for (let i = 0; i < 5; i++) { particles.push(new Particle(this.x, this.y, { x: Math.random() * 6 - 3, y: Math.random() * 6 - 3 }, Math.floor(Math.random() * 6) + 1, { r: this.r, g: this.g, b: this.b }, 120)); } } this.trails.forEach((t, i) => { if (t.a <= 0) { this.trails.splice(i, 1); } t.update(); }); this.trails.push(new Trail(this.x, this.y, 16, 16, this.r, this.g, this.b)); if (!options.showTrail) { this.trails = []; } } setVel(x, y) { if (this.velX < 0) { this.velX = -x; } else { this.velX = x; } if (this.velY < 0) { this.velY = -y; } else { this.velY = y; } } setColor(r, g, b) { this.r = r; this.g = g; this.b = b; } reset() { this.r = 255; this.g = 0; this.b = 0; this.x = 100; this.y = 100; this.velX = 5; this.velY = 5; } } class RandomEnemy extends Enemy { constructor(x, y) { super(x, y); this.randomizeSpeed(); this.randomizeColor(); } draw() { ctx.fillStyle = `rgb(${this.r}, ${this.g}, ${this.b})`; ctx.fillRect(this.x, this.y, 16, 16); if (options.showTrail) { this.trails.forEach(t => { t.draw(); }); } } update(_) { this.x += this.velX; this.y += this.velY; if (this.x < 0 || this.x > canvas.width - 16) { this.randomizeColor(); this.randomizeSpeed(); this.velX *= -1; for (let i = 0; i < 5; i++) { particles.push(new Particle(this.x, this.y, { x: Math.random() * 6 - 3, y: Math.random() * 6 - 3 }, Math.floor(Math.random() * 6) + 1, { r: this.r, g: this.g, b: this.b }, 120)); } } if (this.y < 0 || this.y > canvas.height - 20) { this.randomizeColor(); this.randomizeSpeed(); this.velY *= -1; for (let i = 0; i < 5; i++) { particles.push(new Particle(this.x, this.y, { x: Math.random() * 6 - 3, y: Math.random() * 6 - 3 }, Math.floor(Math.random() * 6) + 1, { r: this.r, g: this.g, b: this.b }, 120)); } } if (Math.random() < 0.01) { this.randomizeColor(); this.randomizeSpeed(); } this.trails.forEach((t, i) => { if (t.a <= 0) { this.trails.splice(i, 1); } t.update(); }); this.trails.push(new Trail(this.x, this.y, 16, 16, this.r, this.g, this.b)); if (!options.showTrail) { this.trails = []; } } randomizeColor() { this.r = Math.floor(Math.random() * 255); this.g = Math.floor(Math.random() * 255); this.b = Math.floor(Math.random() * 255); } randomizeSpeed() { if (this.velX < 0) { this.velX = -Math.floor(Math.random() * 7); } else { this.velX = Math.floor(Math.random() * 7); } if (this.velY < 0) { this.velY = -Math.floor(Math.random() * 7); } else { this.velY = Math.floor(Math.random() * 7); } } } class WalkingEnemy extends Enemy { constructor(x, y) { super(x, y); this.randomizePoint(); } draw() { ctx.fillStyle = "green"; ctx.fillRect(this.x, this.y, 16, 16); if (options.showTrail) { this.trails.forEach(t => { t.draw(); }); } } update(_) { this.x += this.velX; this.y += this.velY; if (this.hitbox.intersects(new Hitbox(this.point.x, this.point.y, 4, 4))) { this.randomizePoint(); } if (this.x < this.point.x) { this.velX = 2; } else if (this.x > this.point.x) { this.velX = -2; } else { this.velX = 0; } if (this.y < this.point.y) { this.velY = 2; } else if (this.y > this.point.y) { this.velY = -2; } else { this.velY = 0; } this.trails.forEach((t, i) => { if (t.a <= 0) { this.trails.splice(i, 1); } t.update(); }); this.trails.push(new Trail(this.x, this.y, 16, 16, 0, 255, 0)); if (!options.showTrail) { this.trails = []; } } randomizePoint() { this.point = { x: Math.floor(Math.random() * canvas.width), y: Math.floor(Math.random() * canvas.height) }; } } class BossEnemyBullet extends Enemy { constructor(x, y) { super(x, y); this.velX = Math.floor(Math.random() * 3) - 1; this.velY = 10; } draw() { this.trails.forEach(t => { t.draw(); }); ctx.fillStyle = "orange"; ctx.fillRect(this.x, this.y, 12, 12); } update(_) { this.x += this.velX; this.y += this.velY; if (this.y > canvas.height + 16) { for (let i = 0; i < 7; i++) { particles.push(new Particle(this.x, this.y, { x: Math.random() * 6 - 3, y: Math.random() * 6 - 3 }, Math.floor(Math.random() * 6) + 1, { r: 255, g: 160, b: 0 }, 120)); } enemies.splice(enemies.indexOf(this), 1); } this.trails.forEach((t, i) => { if (t.a <= 0) { this.trails.splice(i, 1); } t.update(); }); this.trails.push(new Trail(this.x, this.y, 12, 12, 255, 160, 0)); } get hitbox() { return new Hitbox(this.x, this.y, 12, 12); } } class BossEnemy extends Enemy { constructor(x, y) { super(x, y); this.timeSinceLastShot = 0; this.velX = 10; } draw() { ctx.fillStyle = "red"; ctx.fillRect(this.x, this.y, 128, 128); if (options.showTrail) { this.trails.forEach(t => { t.draw(); }); } } update(_) { this.x += this.velX; if (this.x < 0 || this.x > canvas.width - 64) { this.velX *= -1; for (let i = 0; i < 10; i++) { particles.push(new Particle(this.x + 64, this.y + 64, { x: Math.random() * 6 - 3, y: Math.random() * 6 - 3 }, Math.floor(Math.random() * 12) + 1, { r: 255, g: 0, b: 0 }, 120)); } } this.timeSinceLastShot++; if (this.timeSinceLastShot >= 25) { this.timeSinceLastShot = 0; enemies.push(new BossEnemyBullet(this.x + 64, this.y + 64)); } this.trails.forEach((t, i) => { if (t.a <= 0) { this.trails.splice(i, 1); } t.update(); }); this.trails.push(new Trail(this.x, this.y, 128, 128, 255, 0, 0)); if (!options.showTrail) { this.trails = []; } } get hitbox() { return new Hitbox(this.x, this.y, 128, 128); } }